"""
A module defining generator interfaces.
"""

# built-in
from contextlib import contextmanager
from json import dumps
from pathlib import Path
from typing import Any, Callable, Dict, Iterable, Iterator, NamedTuple

# third-party
from vcorelib.io import IndentedFileWriter

# internal
from ifgen import PKG_NAME, VERSION

InstanceConfig = Dict[str, Any]


class GenerateTask(NamedTuple):
    """A container for instance-generation tasks."""

    name: str
    root: Path
    path: Path
    instance: InstanceConfig
    config: Dict[str, Any]

    def command(self, command: str, data: str = "", space: str = " ") -> str:
        """Get a doxygen command string."""
        return (
            str(self.config["command"])
            + command
            + (space if data else "")
            + data
        )

    @contextmanager
    def boilerplate(
        self, includes: Iterable[str] = None
    ) -> Iterator[IndentedFileWriter]:
        """
        Create standard generation boilerplate and yield the file writer to
        use for writing the remaining content.
        """

        with IndentedFileWriter.from_path(self.path, per_indent=4) as writer:
            # Write file header.
            with writer.javadoc():
                writer.write(self.command("file"))
                writer.write(
                    self.command(
                        "brief", f"Generated by {PKG_NAME} ({VERSION})."
                    )
                )
                writer.write(dumps(self.instance, indent=2))

            writer.write("#pragma once")

            with writer.padding():
                # Write any includes.
                for include in sorted(includes if includes else []):
                    writer.write(f"#include {include}")

            # Write namespace.
            namespace = "::".join(self.config["namespace"])
            writer.write(f"namespace {namespace}")
            with writer.scope(suffix=f"; // namespace {namespace}", indent=0):
                # Write struct definition.
                with writer.padding():
                    with writer.javadoc():
                        writer.write(self.instance["description"])

                    yield writer


InstanceGenerator = Callable[[GenerateTask], None]
GeneratorMap = Dict[str, InstanceGenerator]
