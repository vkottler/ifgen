"""
A module implementing interfaces for struct-file generation.
"""

# built-in
from json import dumps
from multiprocessing import Pool
from pathlib import Path

# third-party
from vcorelib.io import IndentedFileWriter

# internal
from ifgen import PKG_NAME, VERSION
from ifgen.config import Config
from ifgen.struct.body import struct_body
from ifgen.struct.task import GenerateStructTask


def write_struct(writer: IndentedFileWriter, task: GenerateStructTask) -> None:
    """Write the struct definition to the file."""

    with writer.javadoc():
        writer.write(task.struct["description"])

    writer.write(f"struct {task.path.with_suffix('').name}")
    with writer.scope(suffix=";"):
        struct_body(writer, task)


def create_struct(task: GenerateStructTask) -> None:
    """Create a header file based on a struct definition."""

    with IndentedFileWriter.from_path(task.path, per_indent=4) as writer:
        # Write file header.
        with writer.javadoc():
            writer.write(task.command("file"))
            writer.write(
                task.command("brief", f"Generated by {PKG_NAME} ({VERSION}).")
            )
            writer.write(dumps(task.struct, indent=2))

        writer.write("#pragma once")
        writer.empty()

        # Write namespace.
        namespace = "::".join(task.config["namespace"])
        writer.write(f"namespace {namespace}")
        with writer.scope(suffix=f"; // namespace {namespace}", indent=0):
            # Write struct definition.
            with writer.padding():
                write_struct(writer, task)


def generate_structs(root: Path, output: Path, config: Config) -> None:
    """Generate struct files."""

    output.mkdir(parents=True, exist_ok=True)

    pool = Pool()  # pylint: disable=consider-using-with
    try:
        pool.map(
            create_struct,
            (
                GenerateStructTask(
                    root, output.joinpath(f"{name}.h"), data, config.data
                )
                for name, data in config.data["structs"].items()
            ),
        )
    finally:
        pool.close()
        pool.join()
